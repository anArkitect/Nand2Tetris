// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    /* A Register
     * 1. ALU to A register: there is only one possibility
     *     C instruction & write to A register
     * 2. A instruction
     */
    Not(in=instruction[15], out=isAinstruction);
    Not(in=isAinstruction,  out=isCinstruction);

    And(a=isCinstruction, b=instruction[5], out=selALUout);

    Mux16(a=instruction, b=ALUout, sel=selALUout, out=Aregin);
    Or(a=isAinstruction, b=selALUout, out=loadAreg);
    ARegister(in=Aregin, load=loadAreg, out=Aregout);

    // D Register
    And(a=isCinstruction, b=instruction[4], out=loadd);
    DRegister(in=ALUout, load=loadd, out=Dregout);

    // ALU
    Mux16(a=Aregout, b=inM, sel=instruction[12], out=AMout);

    ALU(x=Dregout, y=AMout, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=ZRout, ng=NGout);


    //outM
    Or16(a=false, b=ALUout, out=outM);
    // writeM
    // c instruction& instruction[3] == 1
    And(a=isCinstruction, b=instruction[3], out=writeM);
    // addressM
    Or16(a=false, b=Aregout, out[0..14]=addressM);

    // PC
    // seven cases that need to jump:
    // no need to care about JMP and null
    // JEQ
    And(a=ZRout, b=instruction[1], out=jmpeq);
    // JLT JLE JNE
    And(a=NGout, b=instruction[2], out=jmplt);
    // JGT JGE
    Or(a=ZRout, b=NGout, out=NPout);
    Not(in=NPout, out=PSout);
    And(a=PSout, b=instruction[0], out=jmpgt);
    
    Or(a=jmpeq, b=jmplt, out=jmple);
    Or(a=jmple, b=jmpgt, out=jmptoA);
    // Don't forget it should be a C-instruction
    And(a=jmptoA, b=isCinstruction, out=pcload);

    // If we don't jump then we incre
    Not(in=pcload, out=pcInc);

    PC(in=Aregout, load=pcload, inc=pcInc, reset=reset, out[0..14]=pc);
}